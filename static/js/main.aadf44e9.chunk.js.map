{"version":3,"sources":["components/Header.js","components/ResultScreen.js","components/CalculatorPanel.js","components/CalculatorHistory.js","containers/CalculatorBuilder.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","ResultScreen","history","result","CalculatorPanel","onClick","clearEntry","clearAll","deleteLast","getPanelValue","CalculatorHistory","Component","CalculatorBuilder","state","operation","isOperated","getPanelValueHandler","value","newResult","newHistory","oldResult","oldHistory","length","setState","toString","charAt","indexOf","newValue","parseInt","Number","isNaN","i","resultString","slice","operator","firstNumber","parseFloat","secondNumber","resultNumber","isInteger","toFixed","getNumberDigit","number","changePositiveNegative","this","outputResult","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aadf44e9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div className=\"Header\">\r\n            <h1></h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst ResultScreen = (props) => {\r\n\r\n    return (\r\n        <div className=\"ResultScreen\">\r\n            <p className=\"ResultScreen__history\">{props.history}</p>\r\n            <p className=\"ResultScreen__result\">{props.result}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultScreen\r\n","import React from 'react'\r\n\r\nconst CalculatorPanel = (props) => {\r\n\r\n    // special symbol: ⌫, ÷\r\n    return (\r\n        <div className=\"CalculatorPanel\" >\r\n            <div onClick={() => props.clearEntry()} className=\"CalculatorPanel__clearEntry\"><button>CE</button></div>\r\n            <div onClick={() => props.clearAll()} className=\"CalculatorPanel__clearAll\"><button>C</button></div>\r\n            <div onClick={() => props.deleteLast()} className=\"CalculatorPanel__delete\"><button>&larr;</button></div> \r\n            <div onClick={() => props.getPanelValue(\"÷\")} className=\"CalculatorPanel__divide\"><button>÷</button></div>\r\n            <div onClick={() => props.getPanelValue(\"7\")} className=\"CalculatorPanel__7\"><button>7</button></div>\r\n            <div onClick={() => props.getPanelValue(\"8\")} className=\"CalculatorPanel__8\"><button>8</button></div>\r\n            <div onClick={() => props.getPanelValue(\"9\")} className=\"CalculatorPanel__9\"><button>9</button></div>\r\n            <div onClick={() => props.getPanelValue(\"×\")} className=\"CalculatorPanel__multiply\"><button>×</button></div>\r\n            <div onClick={() => props.getPanelValue(\"4\")} className=\"CalculatorPanel__4\"><button>4</button></div>\r\n            <div onClick={() => props.getPanelValue(\"5\")} className=\"CalculatorPanel__5\"><button>5</button></div>\r\n            <div onClick={() => props.getPanelValue(\"6\")} className=\"CalculatorPanel__6\"><button>6</button></div>\r\n            <div onClick={() => props.getPanelValue(\"-\")} className=\"CalculatorPanel__subtract\"><button>-</button></div>\r\n            <div onClick={() => props.getPanelValue(\"1\")} className=\"CalculatorPanel__1\"><button>1</button></div>\r\n            <div onClick={() => props.getPanelValue(\"2\")} className=\"CalculatorPanel__2\"><button>2</button></div>\r\n            <div onClick={() => props.getPanelValue(\"3\")} className=\"CalculatorPanel__3\"><button>3</button></div>\r\n            <div onClick={() => props.getPanelValue(\"+\")} className=\"CalculatorPanel__plus\"><button>+</button></div>\r\n            <div onClick={() => props.getPanelValue(\"+/-\")} className=\"CalculatorPanel__prefix\"><button>+/-</button></div>\r\n            <div onClick={() => props.getPanelValue(\"0\")} className=\"CalculatorPanel__0\"><button>0</button></div>\r\n            <div onClick={() => props.getPanelValue(\".\")} className=\"CalculatorPanel__point\"><button>.</button></div>\r\n            <div onClick={() => props.getPanelValue(\"=\")} className=\"CalculatorPanel__equal\"><button>=</button></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalculatorPanel\r\n","import React, {Component} from 'react'\r\n\r\nclass CalculatorHistory extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"CalculatorHistory\">\r\n               <div className=\"CalculatorHistory__icon\"><span className=\"icon-history1\"></span></div> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalculatorHistory;","import React, {Component} from 'react'\r\n\r\nimport ResultScreen from '../components/ResultScreen'\r\nimport CalculatorPanel from '../components/CalculatorPanel'\r\nimport CalculatorHistory from '../components/CalculatorHistory'\r\n\r\nclass CalculatorBuilder extends Component {\r\n\r\n    state = {\r\n        result: \"\",\r\n        history: \"\",\r\n        operation: \"\",\r\n        isOperated: false,\r\n        \r\n    }\r\n    \r\n    // get clicked value from panel, keep in the state \r\n    // and display on the result screen\r\n    getPanelValueHandler = (value) => {\r\n        let oldResult = this.state.result;\r\n        const oldHistory = this.state.history;\r\n\r\n        let newResult;\r\n        let newHistory;\r\n\r\n        if (this.state.result === \"=NaN\" || this.state.result === \"=Infinity\") return\r\n        \r\n        // limit amount of number\r\n        if (oldResult.length > 11) {\r\n            this.setState({result: \"exceed number\"})\r\n            return ;\r\n        }\r\n\r\n        if (oldResult.toString().charAt(0) === \"0\") {\r\n            let array = [\".\", \"+\", \"-\", \"×\", \"÷\"];\r\n            if (array.indexOf(value) === -1) return\r\n        }\r\n\r\n        // if the result is appeared and press other that is not number\r\n        if (oldResult.toString().charAt(0) === \"=\") {\r\n            let newValue = parseInt(value);\r\n            if (!Number.isNaN(newValue) || newValue === \"+/-\") this.clearAll();\r\n        }\r\n        \r\n        // when user press operator\r\n        if (value === \"+\" || value === \"-\" || value === \"×\" || value === \"÷\") {\r\n            if (oldResult.length === 0 && oldHistory.length === 0) return;\r\n            \r\n            let i, resultString = \"\";\r\n            for (i = 0; i < oldResult.length; i++) {\r\n                resultString += oldResult[i];\r\n            }   \r\n\r\n            // cut = symbol\r\n            if (this.state.isOperated) resultString = oldResult.slice(1)\r\n\r\n            newHistory = resultString + value;\r\n\r\n            if (oldResult.length === 0) {\r\n                newHistory = oldHistory.slice(0,-1);\r\n                newHistory += value;\r\n                this.setState({history: newHistory});\r\n                return ;\r\n            }\r\n\r\n            this.setState({history: newHistory}); // update history\r\n            this.setState({result: \"\"}); // reset result screen\r\n            this.setState({operation: value}); // keep operation\r\n\r\n        } \r\n        \r\n        else if (value === \"=\"){\r\n            let operator = oldHistory.slice(-1);\r\n            let firstNumber = parseFloat(oldHistory.slice(0,-1));\r\n            let secondNumber = parseFloat(oldResult);\r\n            let resultNumber = 0;\r\n\r\n            switch (operator) {\r\n                case \"+\":\r\n                    resultNumber = firstNumber + secondNumber;\r\n                    break;\r\n                case \"-\":\r\n                    resultNumber = firstNumber - secondNumber;\r\n                    break;\r\n                case \"×\":\r\n                    resultNumber = firstNumber * secondNumber;\r\n                    break;\r\n                case \"÷\":\r\n                    resultNumber = firstNumber / secondNumber;\r\n                break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (!Number.isInteger(resultNumber)) resultNumber = resultNumber.toFixed(2);\r\n            \r\n            if (this.getNumberDigit(resultNumber) > 11) {\r\n                this.setState({result: \"exceed number\"})\r\n                return ;\r\n            }\r\n\r\n            resultNumber = resultNumber.toString();\r\n            resultNumber = \"=\" + resultNumber;\r\n\r\n            newHistory = oldHistory + oldResult;\r\n            this.setState({isOperated: true})\r\n            this.setState({history: newHistory})\r\n            this.setState({result: resultNumber})\r\n        } \r\n        \r\n        else if (value === \"+/-\") {\r\n            let number;\r\n            if (oldResult.toString().charAt(0) === \"=\") return ;\r\n            \r\n            number = parseFloat(oldResult);\r\n            number = this.changePositiveNegative(number).toString();\r\n            \r\n            this.setState({result: number})\r\n        } \r\n        // number\r\n        else if (!Number.isNaN(value)) {\r\n            if (this.state.isOperated === true) {\r\n                this.setState({result: value})\r\n                this.setState({isOperated: false})\r\n                return;\r\n            }\r\n        \r\n            newResult = oldResult + value;\r\n            this.setState({result: newResult})\r\n        } \r\n    }\r\n\r\n    // get digit\r\n    getNumberDigit = (number) => {\r\n        return number.toString().length;\r\n    }\r\n    // clear entry\r\n    clearEntry = () => {\r\n        if (this.state.isOperated === true) {\r\n            this.setState({result: \"\"});\r\n            this.setState({history: \"\"});\r\n        }\r\n        this.setState({result: \"\"});\r\n    }\r\n\r\n    clearAll = () => {\r\n        this.setState({result: \"\"});\r\n        this.setState({history: \"\"});\r\n    }\r\n\r\n    // backspace, delete one value from the end\r\n    deleteLast = () => {\r\n        if (this.state.isOperated === true) {\r\n            this.setState({result: \"\"});\r\n            this.setState({history: \"\"});\r\n            return;\r\n        }\r\n        let oldResult = this.state.result\r\n        oldResult = oldResult.slice(0,-1)  \r\n        this.setState({result: oldResult});\r\n    }\r\n\r\n    changePositiveNegative = (number) => -number;\r\n    \r\n    // display result on the screen when click equal button\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CalculatorBuilder\">\r\n                <CalculatorHistory/>\r\n                <ResultScreen result={this.state.result} history={this.state.history}/>\r\n                <CalculatorPanel getPanelValue={this.getPanelValueHandler}\r\n                                 clearEntry={this.clearEntry}\r\n                                 clearAll={this.clearAll}\r\n                                 deleteLast={this.deleteLast}\r\n                                 outputResult={this.outputResult}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalculatorBuilder;","import React from 'react';\n\nimport Header from './components/Header'\nimport CalculatorBuilder from './containers/CalculatorBuilder'\nimport './sass/main.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <CalculatorBuilder />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}